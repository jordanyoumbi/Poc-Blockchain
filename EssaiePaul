pragma solidity ^0.4.11;
import "github.com/oraclize/ethereum-api/oraclizeAPI.sol";

contract Temptest is usingOraclize {

    uint public _temperature;
    address _receiver;
    uint _amount;
    mapping (address => uint) balances;

    event newOraclizeQuery(string description);
    //event updatedtemp(string temperature);
 
    function sendCoin(address receiver, uint amount) {
		_amount = amount;
        _receiver = receiver;
        updateTemp();
	}

    function updateTemp()  {
        if (oraclize_getPrice("URL") > this.balance) {
            newOraclizeQuery("Oraclize query was NOT sent, please add some ETH to cover for the query fee");
        } else {
            newOraclizeQuery("Oraclize query was sent, standing by for the answer..");
            oraclize_query("URL", "json(http://www.prevision-meteo.ch/services/json/paris).current_condition.tmp");
        }
    }

    function __callback(bytes32 myid, string result) {
        if (msg.sender != oraclize_cbAddress()) throw;
        
        //updatedtemp(result);
        //_temperature = stringToUint(result);
        _temperature = 40;
        if (_temperature < 20) throw;
		else balances[_receiver] += _amount;
    }
	
	function stringToUint(string s) constant returns (uint result) {
        bytes memory b = bytes(s);
        uint i;
        result = 0;
        for (i = 0; i < b.length; i++) {
            uint c = uint(b[i]);
            if (c >= 48 && c <= 57) {
                result = result * 10 + (c - 48);
            }
        }
    }
}



