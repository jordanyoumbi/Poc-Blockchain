# Poc-Blockchain
#Effectuer une blockchain adressée à un agriculteur pour un changement éventuel de temperature
pragma solidity ^0.4.11;
import "github.com/oraclize/ethereum-api/oraclizeAPI.sol";

contract Temptest is usingOraclize {

     string public restemp;
     uint amount = 1000;
    event newOraclizeQuery(string description);
    event updatedtemp(string temperature);
 


    function __callback(bytes32 myid, string result) {
        if (msg.sender != oraclize_cbAddress()) throw;
        restemp = result;
        updatedtemp(result);
    }

    function updateTemp()  {
        if (oraclize_getPrice("URL") > this.balance) {
            newOraclizeQuery("Oraclize query was NOT sent, please add some ETH to cover for the query fee");
        } else {
            newOraclizeQuery("Oraclize query was sent, standing by for the answer..");
            oraclize_query("URL", "json(http://www.prevision-meteo.ch/services/json/paris).current_condition.tmp"));
        }
    }
    
    function sendCoin(address receiver, amount) returns(bool sufficient) {
		if (temperature < 20) return false;
		else
		balances[receiver] += amount;
		return true;
	}
	
	function stringToUint(string s) constant returns (uint result) {
        bytes memory b = bytes(s);
        uint i;
        result = 0;
        for (i = 0; i < b.length; i++) {
            uint c = uint(b[i]);
            if (c >= 48 && c <= 57) {
                result = result * 10 + (c - 48);
            }
        }
    }
}




